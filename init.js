//# sourceMappingURL=init.map
// Generated by CoffeeScript 1.10.0

/*
	Copyright (c) 2013, dev-rke
 */

(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  codiad.LessCompiler = (function() {
    var ignoreSaveEvent, settings;

    LessCompiler.instance = null;

    settings = null;

    ignoreSaveEvent = false;


    /*
    		basic plugin environment initialization
     */

    function LessCompiler(global, jQuery) {
      this.showDialog = bind(this.showDialog, this);
      this.getFileNameWithoutExtension = bind(this.getFileNameWithoutExtension, this);
      this.getBaseDir = bind(this.getBaseDir, this);
      this.saveFile = bind(this.saveFile, this);
      this.compileLessAndSave = bind(this.compileLessAndSave, this);
      this.addOpenHandler = bind(this.addOpenHandler, this);
      this.addSaveHandler = bind(this.addSaveHandler, this);
      this.preloadLibrariesAndSettings = bind(this.preloadLibrariesAndSettings, this);
      this.init = bind(this.init, this);
      this.codiad = global.codiad;
      this.amplify = global.amplify;
      this.jQuery = jQuery;
      this.scripts = document.getElementsByTagName('script');
      this.path = this.scripts[this.scripts.length - 1].src.split('?')[0];
      this.curpath = this.path.split('/').slice(0, -1).join('/') + '/';
      this.workspaceUrl = 'workspace/';
      LessCompiler.instance = this;
      this.jQuery((function(_this) {
        return function() {
          return _this.init();
        };
      })(this));
    }


    /*
    		main plugin initialization
     */

    LessCompiler.prototype.init = function() {
      this.preloadLibrariesAndSettings();
      this.addSaveHandler();
      return this.addOpenHandler();
    };


    /*
    		load less compiler and settings
     */

    LessCompiler.prototype.preloadLibrariesAndSettings = function() {
      if (typeof window.less === 'undefined') {
        this.jQuery.loadScript(this.curpath + "less.min.js");
      }
      if (typeof window.sourceMap === 'undefined') {
        this.jQuery.loadScript(this.curpath + "source-map-0.1.31.js");
      }
      this.jQuery.getJSON(this.curpath + "controller.php?action=load", (function(_this) {
        return function(json) {
          return _this.settings = json;
        };
      })(this));
      return this.jQuery.getJSON(this.curpath + "controller.php?action=getWorkspaceUrl", (function(_this) {
        return function(json) {
          return _this.workspaceUrl = json.workspaceUrl;
        };
      })(this));
    };


    /*
    		Add new compiler procedure to save handler
     */

    LessCompiler.prototype.addSaveHandler = function() {
      return this.amplify.subscribe('active.onSave', (function(_this) {
        return function() {
          if (!_this.ignoreSaveEvent) {
            return _this.compileLessAndSave();
          }
        };
      })(this));
    };


    /*
    		Add hotkey binding for manual compiling
     */

    LessCompiler.prototype.addOpenHandler = function() {
      return this.amplify.subscribe('active.onOpen', (function(_this) {
        return function() {
          var editorInstance, manager;
          editorInstance = _this.codiad.editor.getActive();
          if (!editorInstance) {
            return;
          }
          manager = editorInstance.commands;
          return manager.addCommand({
            name: "Compile Less",
            bindKey: {
              win: "Ctrl-Alt-Y",
              mac: "Command-Alt-Y"
            },
            exec: function() {
              return _this.compileLessAndSave();
            }
          });
        };
      })(this));
    };


    /*
    		compiles Less and saves it to the same name
    		with a different file extension
     */

    LessCompiler.prototype.compileLessAndSave = function() {
      var content, currentFile, error, exception, ext, fileName, options;
      if (!this.settings.less.compile_less) {
        return;
      }
      currentFile = this.codiad.active.getPath();
      console.log(currentFile);
      ext = this.codiad.filemanager.getExtension(currentFile);
      if (ext.toLowerCase() === 'less') {
        content = this.codiad.editor.getContent();
        fileName = this.getFileNameWithoutExtension(currentFile);
        options = this.settings.less;
        options.filename = this.workspaceUrl + currentFile;
        try {
          window.lessoptions = options;
          return less.render(content, options, (function(_this) {
            return function(err, output) {
              if (err) {
                throw err;
              }
              _this.saveFile(fileName + "css", output.css);
              return _this.codiad.message.success('Less compiled successfully.');
            };
          })(this));
        } catch (error) {
          exception = error;
          return this.codiad.message.error('Less compilation failed: ' + exception);
        }
      }
    };


    /*
    		saves a file, creates one if it does not exist
     */

    LessCompiler.prototype.saveFile = function(fileName, fileContent) {
      var baseDir, error, exception, instance;
      try {
        if (instance = this.codiad.active.sessions[fileName]) {
          instance.setValue(fileContent);
          this.ignoreSaveEvent = true;
          this.codiad.active.save(fileName);
          this.ignoreSaveEvent = false;
          return;
        }
        baseDir = this.getBaseDir(fileName);
        if (!this.codiad.filemanager.getType(fileName)) {
          this.jQuery.ajax({
            url: this.codiad.filemanager.controller + '?action=create&path=' + fileName + '&type=file',
            success: (function(_this) {
              return function(data) {
                var createResponse, shortName;
                createResponse = _this.codiad.jsend.parse(data);
                if (createResponse !== 'error') {
                  shortName = _this.codiad.filemanager.getShortName(fileName);
                  _this.codiad.filemanager.createObject(baseDir, fileName, 'file');
                  return _this.amplify.publish('filemanager.onCreate', {
                    createPath: fileName,
                    path: baseDir,
                    shortName: shortName,
                    type: 'file'
                  });
                }
              };
            })(this),
            async: false
          });
        }
        return this.codiad.filemanager.saveFile(fileName, fileContent, {
          error: (function(_this) {
            return function() {
              return _this.codiad.message.error('Cannot save file.');
            };
          })(this)
        });
      } catch (error) {
        exception = error;
        return this.codiad.message.error('Cannot save file: ' + exception);
      }
    };


    /*
    		Get base dir of a path
     */

    LessCompiler.prototype.getBaseDir = function(filepath) {
      return filepath.substring(0, filepath.lastIndexOf("/"));
    };


    /*
    		Get filename without file extension of a file
     */

    LessCompiler.prototype.getFileNameWithoutExtension = function(filepath) {
      return filepath.substr(0, filepath.lastIndexOf(".") + 1);
    };


    /*
           shows settings dialog
     */

    LessCompiler.prototype.showDialog = function() {
      var generateCheckbox, html, label, lessLabels, lessRules, name, value;
      generateCheckbox = (function(_this) {
        return function(name, label, enabled, title) {
          if (enabled == null) {
            enabled = false;
          }
          if (title == null) {
            title = "";
          }
          return "			    <input type=\"checkbox\" id=\"" + name + "\" " + (enabled ? 'checked="checked"' : void 0) + " />\n<label for=\"" + name + "\"  title=\"" + title + "\">" + label + "</label><br />";
        };
      })(this);
      lessLabels = {
        'compile_less': 'Compile Less on save',
        'compress': 'Compress css',
        'ieCompat': 'enable Internet Explorer Compatibility Mode'
      };
      lessRules = (function() {
        var ref, results;
        ref = this.settings.less;
        results = [];
        for (name in ref) {
          value = ref[name];
          label = lessLabels[name];
          if (!label) {
            continue;
          }
          results.push(generateCheckbox(name, label, value));
        }
        return results;
      }).call(this);
      html = "<div id=\"less-settings\">\n	            <h2>Less Compiler Settings</h2>\n	            <div id=\"less-container\">\n	        		" + (lessRules.join('')) + "\n	        	</div>\n	        	<button id=\"modal_close\">Save Settings</button>\n        	</div>";
      this.jQuery('#modal-content').append(this.jQuery(html));
      this.jQuery('#modal').show().draggable({
        handle: '#drag-handle'
      });
      settings = this.settings;
      this.jQuery('#modal-content').on('click', 'input', (function(_this) {
        return function(target) {
          var isActive;
          name = $(target.currentTarget).attr('id');
          isActive = $(target.currentTarget).prop('checked');
          if (name in settings.less) {
            settings.less[name] = isActive;
          }
          return true;
        };
      })(this));
      return this.jQuery('#modal_close').on('click', (function(_this) {
        return function() {
          var json;
          _this.codiad.modal.unload();
          _this.jQuery('#modal-content').off();
          _this.settings = settings;
          json = JSON.stringify(settings);
          return _this.jQuery.post(_this.curpath + "controller.php?action=save", {
            settings: json
          }, function(data) {
            json = JSON.parse(data);
            if (json.status === "error") {
              return _this.codiad.message.error(json.message);
            } else {
              return _this.codiad.message.success(json.message);
            }
          });
        };
      })(this));
    };


    /*
           Static wrapper to call showDialog outside of the object
     */

    LessCompiler.showDialogWrapper = function() {
      return LessCompiler.instance.showDialog();
    };

    return LessCompiler;

  })();

  new codiad.LessCompiler(this, jQuery);

}).call(this);
